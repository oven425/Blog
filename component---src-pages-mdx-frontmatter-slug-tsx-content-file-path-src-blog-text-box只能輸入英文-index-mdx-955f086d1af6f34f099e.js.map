{"version":3,"file":"component---src-pages-mdx-frontmatter-slug-tsx-content-file-path-src-blog-text-box只能輸入英文-index-mdx-955f086d1af6f34f099e.js","mappings":"oNAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,GAAI,KACJC,EAAG,IACHC,GAAI,KACJC,EAAG,IACHC,KAAM,SACLC,EAAAA,EAAAA,MAAsBT,EAAMU,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBV,EAAYG,GAAI,KAAM,iBAAkB,KAAMO,EAAAA,cAAoBV,EAAYI,EAAG,KAAM,iBAAkBM,EAAAA,cAAoBV,EAAYK,IAAK,KAAM,oBAAqBK,EAAAA,cAAoBV,EAAYK,IAAK,KAAM,oBAAqBK,EAAAA,cAAoBV,EAAYK,IAAK,KAAM,UAAW,KAAMK,EAAAA,cAAoBV,EAAYI,EAAG,KAAM,qBAAsBM,EAAAA,cAAoBV,EAAYK,IAAK,KAAMK,EAAAA,cAAoBV,EAAYM,EAAG,CACrfK,KAAM,mHACL,iBAAkB,KAAMD,EAAAA,cAAoBV,EAAYI,EAAG,KAAM,4CAA6C,KAAMM,EAAAA,cAAoBV,EAAYO,KAAM,CAC3JK,wBAAyB,CACvBC,OAAQ,sMAER,KAAMH,EAAAA,cAAoBV,EAAYI,EAAG,KAAMM,EAAAA,cAAoBV,EAAYM,EAAG,CACpFK,KAAM,sPACL,4CAA6C,KAAMD,EAAAA,cAAoBV,EAAYI,EAAG,KAAM,gBAAiBM,EAAAA,cAAoBV,EAAYK,IAAK,KAAM,gCAAiCK,EAAAA,cAAoBV,EAAYK,IAAK,KAAM,cAAe,KAAMK,EAAAA,cAAoBV,EAAYO,KAAM,CAChSK,wBAAyB,CACvBC,OAAQ,gQAGd,CAKA,MAJA,SAAoBd,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOe,QAASC,GAAad,OAAOC,OAAO,CAAC,GAAGM,EAAAA,EAAAA,MAAsBT,EAAMU,YAC3E,OAAOM,EAAYL,EAAAA,cAAoBK,EAAWhB,EAAOW,EAAAA,cAAoBZ,EAAmBC,IAAUD,EAAkBC,EAC9H,E,oBCxBA,MAAMiB,EAAWC,IACf,IAAI,KAACC,EAAI,SAAEC,GAAYF,EAGvB,OAFAG,QAAQC,IAAIH,GACZE,QAAQC,IAAIF,GACLT,EAAAA,cAAoBY,EAAAA,EAAQ,KAAMZ,EAAAA,cAAoB,UAAW,CACtEa,UAAW,kBACVJ,GAAU,EAGFK,EAAOC,IAClB,IAAI,KAACP,GAAQO,EACb,OAAOf,EAAAA,cAAoBgB,EAAAA,EAAK,CAC9BC,MAAOT,EAAKU,IAAIC,YAAYF,OAC5B,EAGW,SAASG,EAAiB/B,GACvC,OAAOW,EAAAA,cAAoBM,EAAUjB,EAAOW,EAAAA,cAAoBqB,EAAqBhC,GACvF,C,sECWO,MAAMiC,EAAa,gBAAoB,CAAC,GAiCxC,SAASC,EAAiBxB,GAC/B,MAAMyB,EAAoB,aAAiBF,GAG3C,OAAO,WAAc,IAEO,mBAAfvB,EACFA,EAAWyB,GAGb,IAAIA,KAAsBzB,IAChC,CAACyB,EAAmBzB,GACzB,C","sources":["webpack://my-gatsby-site/./src/blog/TextBox只能輸入英文/index.mdx","webpack://my-gatsby-site/./src/pages/{mdx.frontmatter__slug}.tsx","webpack://my-gatsby-site/./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    br: \"br\",\n    a: \"a\",\n    span: \"span\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h1, null, \"TextBox只能輸入英文\"), \"\\n\", React.createElement(_components.p, null, \"最近做通訊程式,只能傳送英文\", React.createElement(_components.br), \"\\n\", \"所以在TextBox就只能輸入英文\", React.createElement(_components.br), \"\\n\", \"印象中去年有遇過,不過忘記怎麼做了\", React.createElement(_components.br), \"\\n\", \"這次要記錄下\"), \"\\n\", React.createElement(_components.p, null, \"在網路上找了一些資料,參考了以下連結\", React.createElement(_components.br), \"\\n\", React.createElement(_components.a, {\n    href: \"https://blog.lindexi.com/post/WPF-%E8%AE%BE%E7%BD%AE%E8%BE%93%E5%85%A5%E5%8F%AA%E8%83%BD%E8%8B%B1%E6%96%87.html\"\n  }, \"WPF 设置输入只能英文\")), \"\\n\", React.createElement(_components.p, null, \"以上連結的重點是以下程式碼, 讓foucs移到TextBox,會讓輸入法切回英文\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"xaml\\\"><pre class=\\\"language-xaml\\\"><code class=\\\"language-xaml\\\">&lt;TextBox InputMethod.IsInputMethodEnabled=&quot;False&quot;/&gt;</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"https://rksoftware.wordpress.com/2016/05/08/wpf-textbox-%E6%AF%8E%E3%81%AB%E3%83%95%E3%82%A9%E3%83%BC%E3%82%AB%E3%82%B9%E6%99%82%E3%81%AE-ime-%E3%81%AE%E5%A4%89%E6%8F%9B%E3%83%A2%E3%83%BC%E3%83%89%E3%82%92%E8%A8%AD%E5%AE%9A%E3%81%99%E3%82%8B/\"\n  }, \"[WPF] TEXTBOX 毎にフォーカス時の IME の変換モードを設定する\")), \"\\n\", React.createElement(_components.p, null, \"以上連結的重點是以下程式碼\", React.createElement(_components.br), \"\\n\", \"讓foucs移到TextBox,會讓輸入法切回英文(半形)\", React.createElement(_components.br), \"\\n\", \"但是可以在切換出入法\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"xaml\\\"><pre class=\\\"language-xaml\\\"><code class=\\\"language-xaml\\\">&lt;TextBox InputMethod.PreferredImeState=&quot;On&quot; InputMethod.PreferredImeConversionMode=&quot;Alphanumeric&quot;/&gt;</code></pre></div>\"\n    }\n  }));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"C:/Users/oven4/source/repos/Blog/src/blog/TextBox只能輸入英文/index.mdx\";\nimport * as React from 'react';\nimport Layout from '../components/layout';\nimport Seo from '../components/seo';\nconst BlogPost = _ref => {\n  let {data, children} = _ref;\n  console.log(data);\n  console.log(children);\n  return React.createElement(Layout, null, React.createElement(\"article\", {\n    className: \"prose prose-lg\"\n  }, children));\n};\nconst query = \"1083539204\";\nexport const Head = _ref2 => {\n  let {data} = _ref2;\n  return React.createElement(Seo, {\n    title: data.mdx.frontmatter.title\n  });\n};\nBlogPost\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(BlogPost, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","p","br","a","span","_provideComponents","components","React","href","dangerouslySetInnerHTML","__html","wrapper","MDXLayout","BlogPost","_ref","data","children","console","log","Layout","className","Head","_ref2","Seo","title","mdx","frontmatter","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","MDXContext","useMDXComponents","contextComponents"],"sourceRoot":""}